# -*- coding: utf-8 -*-
"""logistic_regresstion_diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13s9_z-WZg8j2OLONKZLaI3TrmRf-DUm7
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import itertools
import numpy as np
import seaborn as sns 
import matplotlib.pyplot as plt 
# % matplotlib inline

from sklearn import svm
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
import warnings
warnings.filterwarnings('ignore')
import joblib

diabetes_df = pd.read_csv('diabetes.csv')
print(diabetes_df.head())

diabetes_df.info()
diabetes_df.isnull().sum()

corr = diabetes_df.corr()
print(corr)
sns.heatmap(corr,
           xticklabels=corr.columns,
           yticklabels=corr.columns)

plt.subplots(figsize=(18,15))
plt.subplot(4,3,1)
plt.subplots_adjust(wspace=0.2,hspace=0.5)
sns.countplot(x='Outcome',data=diabetes_df )
plt.subplot(4,3,2)
plt.subplots_adjust(wspace=0.2,hspace=0.5)
sns.barplot(x='Outcome',y='Age',data=diabetes_df)
plt.show()

#data analysis 
columns = diabetes_df.columns[:8]
# print(columns)
plt.subplots(figsize=(18,15))
length = len(columns)
for i,j in itertools.zip_longest(columns,range(length)):
  plt.subplot((length/2),3,j+1)
  plt.subplots_adjust(wspace=0.2,hspace=0.5)
  diabetes_df[i].hist(bins=20,edgecolor='black')
  plt.title(i)
plt.show()

#analysis of diabetic classes 
diabetes_class = diabetes_df[diabetes_df['Outcome']==1]
columns=diabetes_df.columns[:8]
plt.subplots(figsize=(18,15))
length = len(columns)
for i,j in itertools.zip_longest(columns,range(length)):
  plt.subplot((length/2),3,j+1)
  plt.subplots_adjust(wspace=0.2,hspace=0.5)
  diabetes_class[i].hist(bins=20,edgecolor='black')
  plt.title(i)
  
plt.show()

#data segrigation for train test check
# train=diabetes_df[:650]
# test=diabetes_df[650:750]
# check=diabetes_df[750:]

# trainlabel = np.asarray(train['Outcome'])
# print(trainlabel)

outcome = diabetes_df['Outcome']
data = diabetes_df[diabetes_df.columns[:8]]

train,test=train_test_split(diabetes_df,test_size=0.25,random_state=0,stratify=diabetes_df['Outcome'])# stratify the outcome
train_x = train[train.columns[:8]]
test_x = test[test.columns[:8]]
train_y = train['Outcome']
test_y = test['Outcome']
# print(train)

train_x.head(2)
train_y.head(2)

#SVM
types=['rbf','linear']
for i in types:
    model=svm.SVC(kernel=i)
    model.fit(train_x,train_y)
    prediction=model.predict(test_x)
    print('Accuracy for SVM kernel=',i,'is',metrics.accuracy_score(prediction,test_y))

#Logistic Regression 

model=LogisticRegression()
model.fit(train_x,train_y)
prediction = model.predict(test_x)
print('The accuracy of the Logistic Regression is',metrics.accuracy_score(prediction,test_y))

#Decision Tree
model=DecisionTreeClassifier()
model.fit(train_x,train_y)
prediction = model.predict(test_x)
print('The accuracy of the Decision tree classifier is',metrics.accuracy_score(prediction,test_y))

#k-nearest Neighbour
a_index=list(range(1,11))
a=pd.Series()
x=[0,1,2,3,4,5,6,7,8,9,10]
for i in list(range(1,11)):
    model=KNeighborsClassifier(n_neighbors=i) 
    model.fit(train_x,train_y)
    prediction=model.predict(test_x)
    a=a.append(pd.Series(metrics.accuracy_score(prediction,test_y)))
plt.plot(a_index, a)
plt.xticks(x)
plt.show()
print('Accuracies for different values of n are:',a.values)

#In Nutshell 
abc=[]
classifiers=['Linear Svm','Radial Svm','Logistic Regression','KNN','Decision Tree']
models=[svm.SVC(kernel='linear'),svm.SVC(kernel='rbf'),LogisticRegression(),KNeighborsClassifier(n_neighbors=3),DecisionTreeClassifier()]
for i in models:
    model = i
    model.fit(train_x,train_y)
    prediction=model.predict(test_x)
    abc.append(metrics.accuracy_score(prediction,test_y))
models_dataframe=pd.DataFrame(abc,index=classifiers)   
models_dataframe.columns=['Accuracy']
models_dataframe

